package views;

import data.D_product;
import entities.E_category;
import entities.E_product;
import java.awt.MouseInfo;
import java.awt.Point;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author LilJade
 */
public class V_productsCrud extends javax.swing.JFrame {

    int x, y;
    E_product ep = new E_product();
    D_product dp = new D_product();
    E_category categoryDefault = new E_category();

    DefaultTableModel dfm;

    // Creates new form V_productsCrud
    public V_productsCrud() {
        initComponents();
        this.setLocationRelativeTo(null);
        blockFields();
        buttonsByDefault();
        cargar();
        llenar();
        cmbCategoryProds.setSelectedIndex(cmbCategoryProds.getItemCount() - 1);

    }

    //put the default state for all buttons
    void buttonsByDefault() {
        btnEditStock.setEnabled(false);

        btnNewProd.setEnabled(true);
        btnNewProd.setText("Nuevo Producto");
        btnEditProd.setEnabled(false);
        btnEditProd.setText("Editar");
        btnDeleteProd.setEnabled(false);

        btnCancelAll.setEnabled(false);
        
        btnHistory.setEnabled(false);
        btnEditStock.setEnabled(false);
    }

    //clean all fields of the form
    void cleanFields() {
        lblIdProduct.setText("");
        txtSearchProd.setText("");
        txtNameProd.setText("");
        txtPriceInit.setText("");
        txtPriceSale.setText("");
        txtQuantity.setText("");
        txtPriceInit.setText("");
        txtPriceSale.setText("");
        txtStock.setText("0");
        cmbCategoryProds.setSelectedIndex(cmbCategoryProds.getItemCount() - 1);
    }

    //block all fields of the form
    void blockFields() {
        txtNameProd.setEnabled(false);
        txtQuantity.setEnabled(false);
        txtPriceInit.setEnabled(false);
        txtPriceSale.setEnabled(false);
        txtPriceInit.setEnabled(false);
        txtPriceSale.setEnabled(false);
        txtStock.setEnabled(false);
        cmbCategoryProd.setEnabled(false);
    }

    //unblock all fields of the form
    void unblockFields() {
        txtNameProd.setEnabled(true);
        txtPriceInit.setEnabled(true);
        txtPriceSale.setEnabled(true);
        cmbCategoryProd.setEnabled(true);
        //txtStock.setEnabled(true);
        txtQuantity.setEnabled(true);
    }

    void filtro(String consulta, JTable jtableBuscar) {
        dfm = (DefaultTableModel) jtableBuscar.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<>(dfm);
        jtableBuscar.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(consulta));
    }

    void deleteRows() {
        DefaultTableModel df = (DefaultTableModel) tbProducts.getModel();

        while (tbProducts.getRowCount() > 0) {
            df.removeRow(0);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnTable = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbProducts = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        cmbCategoryProds = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        txtSearchProd = new javax.swing.JTextField();
        btnRefresh = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtNameProd = new javax.swing.JTextField();
        txtPriceInit = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtPriceSale = new javax.swing.JTextField();
        cmbCategoryProd = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        txtStock = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        btnEditStock = new javax.swing.JButton();
        btnCancelAll = new javax.swing.JButton();
        btnEditProd = new javax.swing.JButton();
        btnDeleteProd = new javax.swing.JButton();
        btnNewProd = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        lblIdProduct = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btnHistory = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        lblTittle = new javax.swing.JLabel();
        btnRefresh1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnTable.setBackground(new java.awt.Color(204, 255, 255));
        pnTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tbProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Producto", "Precio Venta", "Existencias"
            }
        ));
        tbProducts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbProductsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbProducts);
        if (tbProducts.getColumnModel().getColumnCount() > 0) {
            tbProducts.getColumnModel().getColumn(0).setPreferredWidth(50);
            tbProducts.getColumnModel().getColumn(1).setPreferredWidth(200);
            tbProducts.getColumnModel().getColumn(2).setPreferredWidth(150);
            tbProducts.getColumnModel().getColumn(3).setPreferredWidth(95);
        }

        jLabel2.setFont(new java.awt.Font("MADE TOMMY", 1, 14)); // NOI18N
        jLabel2.setText("Ver productos por categor√≠a: ");

        cmbCategoryProds.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbCategoryProds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCategoryProdsActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("MADE TOMMY", 1, 14)); // NOI18N
        jLabel13.setText("Buscar un producto: ");

        txtSearchProd.setFont(new java.awt.Font("MADE TOMMY", 1, 12)); // NOI18N
        txtSearchProd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchProdKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchProdKeyTyped(evt);
            }
        });

        btnRefresh.setBackground(new java.awt.Color(0, 51, 204));
        btnRefresh.setFont(new java.awt.Font("MADE TOMMY", 1, 14)); // NOI18N
        btnRefresh.setForeground(new java.awt.Color(255, 255, 255));
        btnRefresh.setText("Refrescar Datos");
        btnRefresh.setBorder(null);
        btnRefresh.setBorderPainted(false);
        btnRefresh.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRefreshMouseClicked(evt);
            }
        });
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnTableLayout = new javax.swing.GroupLayout(pnTable);
        pnTable.setLayout(pnTableLayout);
        pnTableLayout.setHorizontalGroup(
            pnTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTableLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE)
                    .addGroup(pnTableLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbCategoryProds, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnTableLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSearchProd)))
                .addContainerGap())
        );
        pnTableLayout.setVerticalGroup(
            pnTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnTableLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbCategoryProds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtSearchProd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(pnTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 520, 660));

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("MADE TOMMY", 1, 14)); // NOI18N
        jLabel3.setText("Nombre del producto:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 360, -1));

        txtNameProd.setFont(new java.awt.Font("MADE TOMMY", 1, 12)); // NOI18N
        jPanel1.add(txtNameProd, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 360, -1));

        txtPriceInit.setFont(new java.awt.Font("MADE TOMMY", 1, 12)); // NOI18N
        txtPriceInit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPriceInitKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPriceInitKeyTyped(evt);
            }
        });
        jPanel1.add(txtPriceInit, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 360, -1));

        jLabel6.setFont(new java.awt.Font("MADE TOMMY", 1, 14)); // NOI18N
        jLabel6.setText("Precio de Venta");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, -1, -1));

        txtPriceSale.setFont(new java.awt.Font("MADE TOMMY", 1, 12)); // NOI18N
        txtPriceSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPriceSaleActionPerformed(evt);
            }
        });
        txtPriceSale.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPriceSaleKeyTyped(evt);
            }
        });
        jPanel1.add(txtPriceSale, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 360, -1));

        cmbCategoryProd.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(cmbCategoryProd, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 120, 279, -1));

        jLabel8.setFont(new java.awt.Font("MADE TOMMY", 1, 14)); // NOI18N
        jLabel8.setText("Categor√≠a:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        txtStock.setFont(new java.awt.Font("MADE TOMMY", 1, 12)); // NOI18N
        txtStock.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtStock.setText("0");
        txtStock.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtStockKeyTyped(evt);
            }
        });
        jPanel1.add(txtStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 300, 273, -1));

        jLabel10.setFont(new java.awt.Font("MADE TOMMY", 1, 14)); // NOI18N
        jLabel10.setText("Existencias:");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, -1, -1));

        btnEditStock.setBackground(new java.awt.Color(153, 204, 255));
        btnEditStock.setFont(new java.awt.Font("MADE TOMMY", 1, 14)); // NOI18N
        btnEditStock.setText("Gestionar Existencias");
        btnEditStock.setBorder(null);
        btnEditStock.setBorderPainted(false);
        btnEditStock.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnEditStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditStockActionPerformed(evt);
            }
        });
        jPanel1.add(btnEditStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 480, 170, 40));

        btnCancelAll.setBackground(new java.awt.Color(204, 0, 0));
        btnCancelAll.setFont(new java.awt.Font("MADE TOMMY", 1, 14)); // NOI18N
        btnCancelAll.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelAll.setText("Cancelar");
        btnCancelAll.setBorder(null);
        btnCancelAll.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnCancelAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelAllActionPerformed(evt);
            }
        });
        jPanel1.add(btnCancelAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 597, 360, 36));

        btnEditProd.setBackground(new java.awt.Color(255, 204, 51));
        btnEditProd.setFont(new java.awt.Font("MADE TOMMY", 1, 14)); // NOI18N
        btnEditProd.setText("Editar");
        btnEditProd.setBorder(null);
        btnEditProd.setBorderPainted(false);
        btnEditProd.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnEditProd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEditProdMouseClicked(evt);
            }
        });
        btnEditProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditProdActionPerformed(evt);
            }
        });
        jPanel1.add(btnEditProd, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 560, 175, 26));

        btnDeleteProd.setBackground(new java.awt.Color(255, 51, 51));
        btnDeleteProd.setFont(new java.awt.Font("MADE TOMMY", 1, 14)); // NOI18N
        btnDeleteProd.setText("Eliminar");
        btnDeleteProd.setBorder(null);
        btnDeleteProd.setBorderPainted(false);
        btnDeleteProd.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnDeleteProd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDeleteProdMouseClicked(evt);
            }
        });
        jPanel1.add(btnDeleteProd, new org.netbeans.lib.awtextra.AbsoluteConstraints(192, 560, 179, 26));

        btnNewProd.setBackground(new java.awt.Color(102, 204, 0));
        btnNewProd.setFont(new java.awt.Font("MADE TOMMY", 1, 14)); // NOI18N
        btnNewProd.setText("Nuevo Producto");
        btnNewProd.setBorder(null);
        btnNewProd.setBorderPainted(false);
        btnNewProd.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnNewProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewProdActionPerformed(evt);
            }
        });
        jPanel1.add(btnNewProd, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 523, 360, 31));

        jLabel11.setFont(new java.awt.Font("MADE TOMMY", 1, 14)); // NOI18N
        jLabel11.setText("ID:");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        lblIdProduct.setFont(new java.awt.Font("MADE TOMMY", 1, 14)); // NOI18N
        lblIdProduct.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblIdProduct.setText("11111001111");
        lblIdProduct.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.add(lblIdProduct, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, 330, 20));

        jLabel12.setFont(new java.awt.Font("MADE TOMMY", 1, 14)); // NOI18N
        jLabel12.setText("Unidad por Producto:");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 150, 170, -1));

        txtQuantity.setFont(new java.awt.Font("MADE TOMMY", 1, 12)); // NOI18N
        txtQuantity.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtQuantity.setText("1");
        txtQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantityActionPerformed(evt);
            }
        });
        txtQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtQuantityKeyTyped(evt);
            }
        });
        jPanel1.add(txtQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 170, 170, -1));

        jLabel5.setFont(new java.awt.Font("MADE TOMMY", 1, 14)); // NOI18N
        jLabel5.setText("Precio Inicial");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, -1, -1));

        btnHistory.setBackground(new java.awt.Color(153, 204, 255));
        btnHistory.setFont(new java.awt.Font("MADE TOMMY", 1, 14)); // NOI18N
        btnHistory.setText("Historial CompraVenta");
        btnHistory.setBorder(null);
        btnHistory.setBorderPainted(false);
        btnHistory.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHistoryActionPerformed(evt);
            }
        });
        jPanel1.add(btnHistory, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 480, 170, 40));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 40, 380, 660));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblTittle.setFont(new java.awt.Font("MADE TOMMY", 1, 30)); // NOI18N
        lblTittle.setText("Configurar Productos");
        lblTittle.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                lblTittleMouseDragged(evt);
            }
        });
        lblTittle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lblTittleMousePressed(evt);
            }
        });

        btnRefresh1.setBackground(new java.awt.Color(204, 0, 0));
        btnRefresh1.setFont(new java.awt.Font("MADE TOMMY", 1, 14)); // NOI18N
        btnRefresh1.setForeground(new java.awt.Color(255, 255, 255));
        btnRefresh1.setText("Cerrar");
        btnRefresh1.setBorder(null);
        btnRefresh1.setBorderPainted(false);
        btnRefresh1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnRefresh1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefresh1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTittle, javax.swing.GroupLayout.DEFAULT_SIZE, 794, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRefresh1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblTittle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRefresh1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //cancell all operations
    private void btnCancelAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelAllActionPerformed
        cargar();
        llenar();
        cleanFields();
        blockFields();
        buttonsByDefault();
    }//GEN-LAST:event_btnCancelAllActionPerformed

    private void btnEditProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditProdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEditProdActionPerformed

    boolean NoRepeatProduct() {
        for (int i = 0; i < tbProducts.getRowCount(); i++) {
            if (txtNameProd.getText().equals(tbProducts.getValueAt(i, 1)) && txtQuantity.getText().equals(tbProducts.getValueAt(i, 2))
                    && txtPriceInit.getText().equals(tbProducts.getValueAt(i, 3)) && txtPriceSale.getText().equals(tbProducts.getValueAt(i, 4))) {
                JOptionPane.showMessageDialog(null, "Ya existe un producto id√©ntico a √©ste.\nRevise el producto #" + tbProducts.getValueAt(i, 0));
                return false;
            }
        }
        return true;
    }

    private void btnNewProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewProdActionPerformed
        String buttonValue = btnNewProd.getText();

        switch (buttonValue) {
            case "Nuevo Producto":
                btnNewProd.setText("Agregar");
                btnEditProd.setEnabled(false);
                btnDeleteProd.setEnabled(false);
                btnCancelAll.setEnabled(true);
                btnEditStock.setEnabled(true);

                unblockFields();
                break;
            case "Agregar":
                if (txtNameProd.getText().equals("") || txtQuantity.getText().equals("")
                        || txtPriceInit.getText().equals("") || txtPriceSale.getText().equals("")
                        || txtStock.getText().equals("")) {
                    JOptionPane.showMessageDialog(null, "Todos los campos son obligatorios!");
                } else {
                    if (NoRepeatProduct() == true) {
                        ep.setProductName(txtNameProd.getText());
                        ep.setQuantityPerProduct(Integer.parseInt(txtQuantity.getText()));
                        ep.setInitialPrice(Double.parseDouble(txtPriceInit.getText()));
                        ep.setSalePrice(Double.parseDouble(txtPriceSale.getText()));
                        ep.setStock(Integer.parseInt(txtStock.getText()));
                        ep.setIdCategory((E_category) cmbCategoryProd.getSelectedItem());
                        dp.insertproduct(ep);

                        cargar();
                        llenar();
                        cleanFields();
                        blockFields();
                        buttonsByDefault();
                    }
                }
                break;
        }
    }//GEN-LAST:event_btnNewProdActionPerformed

    //refresh components of the form
    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        cleanFields();
        blockFields();
        buttonsByDefault();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnRefresh1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefresh1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnRefresh1ActionPerformed

    //to move form
    private void lblTittleMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblTittleMouseDragged
        Point p = MouseInfo.getPointerInfo().getLocation();
        setLocation(p.x - x, p.y - y);
    }//GEN-LAST:event_lblTittleMouseDragged

    //to move form
    private void lblTittleMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblTittleMousePressed
        x = evt.getX();
        y = evt.getY();
    }//GEN-LAST:event_lblTittleMousePressed

    private void txtSearchProdKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchProdKeyReleased
        filtro(txtSearchProd.getText(), tbProducts);
    }//GEN-LAST:event_txtSearchProdKeyReleased

    private void btnRefreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRefreshMouseClicked
        cargar();
    }//GEN-LAST:event_btnRefreshMouseClicked

    private void tbProductsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbProductsMouseClicked
        buttonsByDefault();
        cleanFields();
        blockFields();
        
        int seleccionar = tbProducts.rowAtPoint(evt.getPoint());
        lblIdProduct.setText(String.valueOf(tbProducts.getValueAt(seleccionar, 0)));
        txtNameProd.setText(String.valueOf(tbProducts.getValueAt(seleccionar, 1)));
        txtQuantity.setText(String.valueOf(tbProducts.getValueAt(seleccionar, 2)));
        txtPriceInit.setText(String.valueOf(tbProducts.getValueAt(seleccionar, 3)));
        txtPriceSale.setText(String.valueOf(tbProducts.getValueAt(seleccionar, 4)));
        txtStock.setText(String.valueOf(tbProducts.getValueAt(seleccionar, 5)));

        btnNewProd.setEnabled(false);
        btnEditProd.setEnabled(true);
        btnDeleteProd.setEnabled(true);
        btnCancelAll.setEnabled(true);
        btnHistory.setEnabled(true);
        btnEditStock.setEnabled(true);
    }//GEN-LAST:event_tbProductsMouseClicked

    private void cmbCategoryProdsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCategoryProdsActionPerformed
        deleteRows();
        E_category categoria = (E_category) cmbCategoryProds.getItemAt(cmbCategoryProds.getSelectedIndex());

        if (categoria != null) {
            cargarByCategory(categoria.getNameC());
        }

        if (cmbCategoryProds.getSelectedItem() == categoryDefault) {
            cargar();
        }
    }//GEN-LAST:event_cmbCategoryProdsActionPerformed

    private void btnDeleteProdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteProdMouseClicked
        ep = new E_product();

        ep.setIdProduct(Integer.parseInt(lblIdProduct.getText()));
        dp.deleteproduct(ep);

        cargar();
        llenar();
        cleanFields();
        blockFields();
        buttonsByDefault();
    }//GEN-LAST:event_btnDeleteProdMouseClicked

    private void btnEditProdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditProdMouseClicked
        String buttonValue = btnEditProd.getText();

        switch (buttonValue) {
            case "Editar":
                btnEditProd.setText("Guardar Cambios");
                btnNewProd.setEnabled(false);
                btnDeleteProd.setEnabled(false);
                btnCancelAll.setEnabled(true);
                unblockFields();

                break;

            case "Guardar Cambios":
                if (txtNameProd.getText().equals("") || txtQuantity.getText().equals("")
                        || txtPriceInit.getText().equals("") || txtPriceSale.getText().equals("")
                        || txtStock.getText().equals("")) {
                    JOptionPane.showMessageDialog(null, "Todos los campos son obligatorios!");
                } else {

                    if (NoRepeatProduct() == true) {
                        ep = new E_product();

                        ep.setProductName(txtNameProd.getText());
                        ep.setQuantityPerProduct(Integer.parseInt(txtQuantity.getText()));
                        ep.setInitialPrice(Double.parseDouble(txtPriceInit.getText()));
                        ep.setSalePrice(Double.parseDouble(txtPriceSale.getText()));
                        ep.setStock(Integer.parseInt(txtStock.getText()));
                        ep.setIdCategory((E_category) cmbCategoryProd.getSelectedItem());
                        ep.setIdProduct(Integer.parseInt(lblIdProduct.getText()));

                        dp.updateproduct(ep);

                        btnEditProd.setText("Editar");

                        cargar();
                        llenar();
                        cleanFields();
                        blockFields();
                        buttonsByDefault();
                    }
                }
                break;
        }
    }//GEN-LAST:event_btnEditProdMouseClicked

    private void txtPriceSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPriceSaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPriceSaleActionPerformed

    private void txtQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuantityActionPerformed

    private void txtPriceInitKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPriceInitKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPriceInitKeyReleased

    private void txtPriceInitKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPriceInitKeyTyped
        char caracter = evt.getKeyChar();

        if (((caracter < '0') || (caracter > '9')) && (caracter != '\b') && (caracter != '.')) {
            evt.consume();
            System.out.println("NOO!");
        }
    }//GEN-LAST:event_txtPriceInitKeyTyped

    private void txtPriceSaleKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPriceSaleKeyTyped
        char caracter = evt.getKeyChar();

        if (((caracter < '0') || (caracter > '9')) && (caracter != '\b') && (caracter != '.')) {
            evt.consume();
            System.out.println("NOO!");
        }
    }//GEN-LAST:event_txtPriceSaleKeyTyped

    private void txtStockKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStockKeyTyped
        char caracter = evt.getKeyChar();

        if (((caracter < '0') || (caracter > '9')) && (caracter != '\b')) {
            evt.consume();
            System.out.println("NOO!");
        }
    }//GEN-LAST:event_txtStockKeyTyped

    private void txtQuantityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQuantityKeyTyped
        char caracter = evt.getKeyChar();

        if (((caracter < '0') || (caracter > '9')) && (caracter != '\b')) {
            evt.consume();
            System.out.println("NOO!");
        }
    }//GEN-LAST:event_txtQuantityKeyTyped

    private void txtSearchProdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchProdKeyTyped

    }//GEN-LAST:event_txtSearchProdKeyTyped

    private void btnEditStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditStockActionPerformed
        ep = new E_product();
        ep.setIdProduct(Integer.parseInt(lblIdProduct.getText()));
        ep.setProductName(txtNameProd.getText());
        ep.setInitialPrice(Double.parseDouble(txtPriceInit.getText()));
        ep.setSalePrice(Double.parseDouble(txtPriceSale.getText()));
        ep.setStock(Integer.parseInt(txtStock.getText()));

        V_stockProdConfig win = new V_stockProdConfig(this, true);
        win.receiveData(ep);
        win.setVisible(true);
    }//GEN-LAST:event_btnEditStockActionPerformed

    private void btnHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHistoryActionPerformed
        V_SalesAndPurchases win = new V_SalesAndPurchases(this, true);
        int id = Integer.parseInt(lblIdProduct.getText());
        win.receiveIdProduct(id);
        
        win.setVisible(true);
    }//GEN-LAST:event_btnHistoryActionPerformed

    //llenar combobox
    public void llenar() {
        D_product data = new D_product();

        //Se eliminan items por defecto en combobox
        cmbCategoryProds.removeAllItems();
        cmbCategoryProd.removeAllItems();
        ArrayList<E_category> lista;
        lista = data.llenarcbx();

        for (int i = 0; i < lista.size(); i++) {
            E_category categoryCmb = new E_category();
            categoryCmb.setIdCategory(lista.get(i).getIdCategory());
            categoryCmb.setNameC(lista.get(i).getNameC());

            cmbCategoryProds.addItem(categoryCmb);
            cmbCategoryProd.addItem(categoryCmb);

//           cmbCategoryProd.addItem(lista.get(i));
        }
        categoryDefault.setNameC("Todos");
        cmbCategoryProds.addItem(categoryDefault);
    }

    //cargar datos de la tabla products
    void cargar() {
        String titulos[] = {"ID", "Producto", "Cantidad por producto", "Precio Inicial", "Precio venta", "Existencias", "IdCategoria"};
        DefaultTableModel df = new DefaultTableModel(null, titulos) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        D_product Pm = new D_product();
        ArrayList<E_product> producto = Pm.showProducts();
        Iterator i = producto.iterator();
        String Filas[] = new String[7];

        while (i.hasNext()) {
            E_product pr;
            pr = (E_product) i.next();
            int id = pr.getIdProduct();
            double priceSale = pr.getSalePrice();
            int Stock = pr.getStock();
            int cpq = pr.getQuantityPerProduct();
            double inicialprecio = pr.getInitialPrice();

            Filas[0] = String.valueOf(id);
            Filas[1] = pr.getProductName();
            Filas[2] = String.valueOf(cpq);
            Filas[3] = String.valueOf(inicialprecio);
            Filas[4] = String.valueOf(priceSale);
            Filas[5] = String.valueOf(Stock);
            Filas[6] = String.valueOf(pr.getIdCategory());

            df.addRow(Filas);
        }

        tbProducts.setModel(df);

        tbProducts.getColumnModel().getColumn(0).setMaxWidth(50);
        tbProducts.getColumnModel().getColumn(0).setMinWidth(50);
        tbProducts.getTableHeader().getColumnModel().getColumn(0).setMaxWidth(50);
        tbProducts.getTableHeader().getColumnModel().getColumn(0).setMinWidth(50);

        tbProducts.getColumnModel().getColumn(3).setMaxWidth(0);
        tbProducts.getColumnModel().getColumn(3).setMinWidth(0);
        tbProducts.getTableHeader().getColumnModel().getColumn(3).setMaxWidth(0);
        tbProducts.getTableHeader().getColumnModel().getColumn(3).setMinWidth(0);

        tbProducts.getColumnModel().getColumn(6).setMaxWidth(0);
        tbProducts.getColumnModel().getColumn(6).setMinWidth(0);
        tbProducts.getTableHeader().getColumnModel().getColumn(6).setMaxWidth(0);
        tbProducts.getTableHeader().getColumnModel().getColumn(6).setMinWidth(0);
    }

    public void cargarByCategory(String nombre) {

        String titulos[] = {"ID", "Producto", "Cantidad por producto", "Precio Inicial", "Precio venta", "Existencias", "IdCategoria"};
        DefaultTableModel df = new DefaultTableModel(null, titulos) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        D_product Pm = new D_product();
        ArrayList<E_product> producto = Pm.showProductsbycategory(nombre);
        Iterator i = producto.iterator();
        String Filas[] = new String[7];

        while (i.hasNext()) {
            E_product pr;
            pr = (E_product) i.next();
            int id = pr.getIdProduct();
            double priceSale = pr.getSalePrice();
            int Stock = pr.getStock();
            int cpq = pr.getQuantityPerProduct();
            double inicialprecio = pr.getInitialPrice();

            Filas[0] = String.valueOf(id);
            Filas[1] = pr.getProductName();
            Filas[2] = String.valueOf(cpq);
            Filas[3] = String.valueOf(inicialprecio);
            Filas[4] = String.valueOf(priceSale);
            Filas[5] = String.valueOf(Stock);
            Filas[6] = String.valueOf(pr.getIdCategory());

            df.addRow(Filas);
        }

        tbProducts.setModel(df);

        tbProducts.getColumnModel().getColumn(0).setMaxWidth(50);
        tbProducts.getColumnModel().getColumn(0).setMinWidth(50);
        tbProducts.getTableHeader().getColumnModel().getColumn(0).setMaxWidth(50);
        tbProducts.getTableHeader().getColumnModel().getColumn(0).setMinWidth(50);

        tbProducts.getColumnModel().getColumn(3).setMaxWidth(0);
        tbProducts.getColumnModel().getColumn(3).setMinWidth(0);
        tbProducts.getTableHeader().getColumnModel().getColumn(3).setMaxWidth(0);
        tbProducts.getTableHeader().getColumnModel().getColumn(3).setMinWidth(0);

        tbProducts.getColumnModel().getColumn(6).setMaxWidth(0);
        tbProducts.getColumnModel().getColumn(6).setMinWidth(0);
        tbProducts.getTableHeader().getColumnModel().getColumn(6).setMaxWidth(0);
        tbProducts.getTableHeader().getColumnModel().getColumn(6).setMinWidth(0);
    }

    public void cargarbyserch(String nombre) {
        deleteRows();
        String titulos[] = {"ID", "Producto", "Cantidad por producto", "Precio Inicial", "Precio venta", "Existencias", "IdCategoria"};
        DefaultTableModel df = new DefaultTableModel(null, titulos) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        D_product Pm = new D_product();
        ArrayList<E_product> producto = Pm.sherchProduct(nombre);
        Iterator i = producto.iterator();
        String Filas[] = new String[7];

        while (i.hasNext()) {
            E_product pr;
            pr = (E_product) i.next();
            int id = pr.getIdProduct();
            double priceSale = pr.getSalePrice();
            int Stock = pr.getStock();
            int cpq = pr.getQuantityPerProduct();
            double inicialprecio = pr.getInitialPrice();

            Filas[0] = String.valueOf(id);
            Filas[1] = pr.getProductName();
            Filas[2] = String.valueOf(cpq);
            Filas[3] = String.valueOf(inicialprecio);
            Filas[4] = String.valueOf(priceSale);
            Filas[5] = String.valueOf(Stock);
            Filas[6] = String.valueOf(pr.getIdCategory());

            df.addRow(Filas);
        }

        tbProducts.setModel(df);

        tbProducts.getColumnModel().getColumn(0).setMaxWidth(50);
        tbProducts.getColumnModel().getColumn(0).setMinWidth(50);
        tbProducts.getTableHeader().getColumnModel().getColumn(0).setMaxWidth(50);
        tbProducts.getTableHeader().getColumnModel().getColumn(0).setMinWidth(50);

        tbProducts.getColumnModel().getColumn(3).setMaxWidth(0);
        tbProducts.getColumnModel().getColumn(3).setMinWidth(0);
        tbProducts.getTableHeader().getColumnModel().getColumn(3).setMaxWidth(0);
        tbProducts.getTableHeader().getColumnModel().getColumn(3).setMinWidth(0);

        tbProducts.getColumnModel().getColumn(6).setMaxWidth(0);
        tbProducts.getColumnModel().getColumn(6).setMinWidth(0);
        tbProducts.getTableHeader().getColumnModel().getColumn(6).setMaxWidth(0);
        tbProducts.getTableHeader().getColumnModel().getColumn(6).setMinWidth(0);
    }

    /*  MAIN METHOD  */
    
//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(V_productsCrud.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(V_productsCrud.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(V_productsCrud.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(V_productsCrud.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new V_productsCrud().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelAll;
    private javax.swing.JButton btnDeleteProd;
    private javax.swing.JButton btnEditProd;
    private javax.swing.JButton btnEditStock;
    private javax.swing.JButton btnHistory;
    private javax.swing.JButton btnNewProd;
    public static javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRefresh1;
    private javax.swing.JComboBox<Object> cmbCategoryProd;
    private javax.swing.JComboBox<Object> cmbCategoryProds;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblIdProduct;
    private javax.swing.JLabel lblTittle;
    private javax.swing.JPanel pnTable;
    private javax.swing.JTable tbProducts;
    private javax.swing.JTextField txtNameProd;
    private javax.swing.JTextField txtPriceInit;
    private javax.swing.JTextField txtPriceSale;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtSearchProd;
    private javax.swing.JTextField txtStock;
    // End of variables declaration//GEN-END:variables
}
